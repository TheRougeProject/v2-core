{
  "address": "0xA6e904D88370D25e8Af3c6Eec7ecdD23a8d8BC83",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint48",
          "name": "tokenId",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "bytes16",
          "name": "stamp",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "index",
          "type": "uint24"
        }
      ],
      "name": "Acquired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "supply",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddedChannel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "ProjectSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bearer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint48",
          "name": "tokenId",
          "type": "uint48"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "grant",
          "type": "bool"
        }
      ],
      "name": "UpdateAuthorization",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACQUISITION_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHANNEL_LIMIT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "channelId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "qty",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes16[]",
              "name": "stamps",
              "type": "bytes16[]"
            }
          ],
          "internalType": "struct Rouge.Acquisition[]",
          "name": "acquisitions",
          "type": "tuple[]"
        }
      ],
      "name": "acquire",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "supply",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalAcquired",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalRedeemed",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Rouge.Channel[]",
          "name": "channel",
          "type": "tuple[]"
        }
      ],
      "name": "addChannels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInfos",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "supply",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalAcquired",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalRedeemed",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Rouge.Channel[]",
          "name": "channels",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoles",
      "outputs": [
        {
          "internalType": "bool[][]",
          "name": "roles",
          "type": "bool[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "tokenId",
          "type": "uint48"
        }
      ],
      "name": "getTokenInfos",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        },
        {
          "internalType": "bytes16",
          "name": "stamp",
          "type": "bytes16"
        },
        {
          "internalType": "bool",
          "name": "redeemed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nextTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "uint16",
          "name": "channelId",
          "type": "uint16"
        }
      ],
      "name": "isEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "tokenId",
              "type": "uint48"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "selector",
                  "type": "bytes4"
                },
                {
                  "internalType": "uint32",
                  "name": "expire",
                  "type": "uint32"
                }
              ],
              "internalType": "struct UseCertificate.Memorandum",
              "name": "memorandum",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "sigR",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sigS",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "sigV",
              "type": "uint8"
            }
          ],
          "internalType": "struct UseCertificate.SignedCertificate",
          "name": "signed",
          "type": "tuple"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "tokenId",
              "type": "uint48"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "selector",
                  "type": "bytes4"
                },
                {
                  "internalType": "uint32",
                  "name": "expire",
                  "type": "uint32"
                }
              ],
              "internalType": "struct UseCertificate.Memorandum",
              "name": "memorandum",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "sigR",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sigS",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "sigV",
              "type": "uint8"
            }
          ],
          "internalType": "struct UseCertificate.SignedCertificate",
          "name": "signed",
          "type": "tuple"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "tokenId",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "proof",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "tokenId",
                  "type": "uint48"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "selector",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "uint32",
                      "name": "expire",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct UseCertificate.Memorandum",
                  "name": "memorandum",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "sigR",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sigS",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "sigV",
                  "type": "uint8"
                }
              ],
              "internalType": "struct UseCertificate.SignedCertificate",
              "name": "certificate",
              "type": "tuple"
            }
          ],
          "internalType": "struct Rouge.Redemption[]",
          "name": "redemptions",
          "type": "tuple[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "URI_",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint48",
              "name": "supply",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalAcquired",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "totalRedeemed",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Rouge.Channel[]",
          "name": "channel",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "uint16[]",
              "name": "channels",
              "type": "uint16[]"
            },
            {
              "internalType": "bool",
              "name": "grant",
              "type": "bool"
            }
          ],
          "internalType": "struct Rouge.Authorization[]",
          "name": "auth",
          "type": "tuple[]"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "uint16[]",
              "name": "channels",
              "type": "uint16[]"
            },
            {
              "internalType": "bool",
              "name": "grant",
              "type": "bool"
            }
          ],
          "internalType": "struct Rouge.Authorization[]",
          "name": "auth",
          "type": "tuple[]"
        }
      ],
      "name": "updateAuthorizations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "stamp",
          "type": "bytes16"
        },
        {
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        }
      ],
      "name": "validProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokenId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "proof",
          "type": "bytes32"
        }
      ],
      "name": "validTokenProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "widthdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "widthdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b19d6ab75bd8ff9e26403cbbc0574ad660413f68934cae413225425a0a7f600",
  "receipt": {
    "to": null,
    "from": "0xC2D7FA960519F1536B98e1f5b621c36C50427F90",
    "contractAddress": "0xA6e904D88370D25e8Af3c6Eec7ecdD23a8d8BC83",
    "transactionIndex": 6,
    "gasUsed": "4546705",
    "logsBloom": "0x
    "blockHash": "0x3a3b41c7d3e4b7d2d610b70ed50fc6c3dd8b5522322579fa5bf689623306b0ad",
    "transactionHash": "0x7b19d6ab75bd8ff9e26403cbbc0574ad660413f68934cae413225425a0a7f600",
    "logs": [],
    "blockNumber": 1154156,
    "cumulativeGasUsed": "5005993",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2ab0cf9a1a22185c6b23e0cf37683b53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"tokenId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"stamp\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"index\",\"type\":\"uint24\"}],\"name\":\"Acquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"supply\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddedChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"ProjectSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bearer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"tokenId\",\"type\":\"uint48\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"grant\",\"type\":\"bool\"}],\"name\":\"UpdateAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACQUISITION_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHANNEL_LIMIT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"qty\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes16[]\",\"name\":\"stamps\",\"type\":\"bytes16[]\"}],\"internalType\":\"struct Rouge.Acquisition[]\",\"name\":\"acquisitions\",\"type\":\"tuple[]\"}],\"name\":\"acquire\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"supply\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalAcquired\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalRedeemed\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Rouge.Channel[]\",\"name\":\"channel\",\"type\":\"tuple[]\"}],\"name\":\"addChannels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"supply\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalAcquired\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalRedeemed\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Rouge.Channel[]\",\"name\":\"channels\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoles\",\"outputs\":[{\"internalType\":\"bool[][]\",\"name\":\"roles\",\"type\":\"bool[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"tokenId\",\"type\":\"uint48\"}],\"name\":\"getTokenInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"stamp\",\"type\":\"bytes16\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint16\",\"name\":\"channelId\",\"type\":\"uint16\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"tokenId\",\"type\":\"uint48\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"expire\",\"type\":\"uint32\"}],\"internalType\":\"struct UseCertificate.Memorandum\",\"name\":\"memorandum\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct UseCertificate.SignedCertificate\",\"name\":\"signed\",\"type\":\"tuple\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"tokenId\",\"type\":\"uint48\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"expire\",\"type\":\"uint32\"}],\"internalType\":\"struct UseCertificate.Memorandum\",\"name\":\"memorandum\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct UseCertificate.SignedCertificate\",\"name\":\"signed\",\"type\":\"tuple\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"tokenId\",\"type\":\"uint48\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"expire\",\"type\":\"uint32\"}],\"internalType\":\"struct UseCertificate.Memorandum\",\"name\":\"memorandum\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct UseCertificate.SignedCertificate\",\"name\":\"certificate\",\"type\":\"tuple\"}],\"internalType\":\"struct Rouge.Redemption[]\",\"name\":\"redemptions\",\"type\":\"tuple[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"URI_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"supply\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalAcquired\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"totalRedeemed\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Rouge.Channel[]\",\"name\":\"channel\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint16[]\",\"name\":\"channels\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"grant\",\"type\":\"bool\"}],\"internalType\":\"struct Rouge.Authorization[]\",\"name\":\"auth\",\"type\":\"tuple[]\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint16[]\",\"name\":\"channels\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"grant\",\"type\":\"bool\"}],\"internalType\":\"struct Rouge.Authorization[]\",\"name\":\"auth\",\"type\":\"tuple[]\"}],\"name\":\"updateAuthorizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"stamp\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"validProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"validTokenProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"widthdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"widthdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rouge.sol\":\"Rouge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Rouge.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./proxies/Singleton.sol\\\";\\nimport \\\"./modules/UseCertificate.sol\\\";\\nimport \\\"./modules/UseStampProof.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n//import \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n//import \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\ncontract Rouge is Singleton, ERC721, UseCertificate, UseStampProof {\\n    using Address for address payable;\\n\\n    string public constant VERSION = \\\"2.0.0\\\";\\n\\n    uint256 public constant NFT_LIMIT = ~uint48(0); // 281,474,976,710,655\\n    uint16 public constant CHANNEL_LIMIT = ~uint16(0); // 65,535\\n    uint256 public constant ACQUISITION_LIMIT = ~uint16(0); // 65,535 per batch\\n\\n    // uint48 to be less than js 2^53 safe integer\\n    uint48 private _nextTokenId;\\n\\n    bool private ready = false;\\n\\n    string public URI;\\n\\n    constructor() ERC721(\\\"Rouge NFT\\\", \\\"RGN\\\") {\\n        // master copy is not usable\\n        ready = true;\\n    }\\n\\n    struct Authorization {\\n        address account;\\n        bytes4 selector;\\n        uint16[] channels;\\n        bool grant;\\n    }\\n\\n    struct Role {\\n        mapping(uint16 => mapping(address => bool)) scope;\\n    }\\n\\n    mapping (bytes4 => Role) private _role;\\n\\n    function hasRole(address account, bytes4 selector, uint16 channelId) view public returns (bool) {\\n        if (_role[selector].scope[channelId][account]) return true;\\n        if (channelId != CHANNEL_LIMIT) return hasRole(account, selector, CHANNEL_LIMIT);\\n        return false;\\n    }\\n\\n    function isEnabled(bytes4 selector, uint16 channelId) view public returns (bool) {\\n        return hasRole(address(0), selector, channelId);\\n    }\\n\\n    struct Channel {\\n        // uint256 type; ? to change on chain behavior\\n        uint48 supply; // keep issuance ? NFT_LIMIT = inf\\n        uint48 totalAcquired;\\n        uint48 totalRedeemed;\\n        address token; // should support ERC20, ERC721, ERC1155\\n        uint256 amount;\\n    }\\n\\n    Channel[] private _channel;\\n\\n    event AddedChannel(uint16 indexed channelId, uint48 supply, uint256 amount);\\n\\n    function addChannels(Channel[] memory channel) public {\\n\\n        // require(!ready || true);\\n        require(channel.length > 0);\\n        require(_channel.length + channel.length < CHANNEL_LIMIT);\\n\\n        for (uint16 i = 0; i < channel.length; i++) {\\n\\n            require(isEnabled(this.addChannels.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n            require(!ready || hasRole(_msgSender(), this.addChannels.selector, CHANNEL_LIMIT), \\\"not authorized\\\");\\n\\n            // XXX allow non zero starting channel ?\\n            channel[i].totalAcquired = 0;\\n            channel[i].totalRedeemed = 0;\\n\\n            _channel.push(channel[i]);\\n\\n            emit AddedChannel(\\n                              uint16(_channel.length - 1),\\n                              channel[i].supply,\\n                              channel[i].amount\\n            );\\n        }\\n    }\\n\\n    event UpdateAuthorization(address indexed account, bytes4 indexed selector, uint16 indexed channelId, bool grant);\\n\\n    function updateAuthorizations(Authorization[] memory auth) public {\\n\\n        for (uint256 i = 0; i < auth.length; i++) {\\n\\n            // per channel grant\\n            if (auth[i].channels.length > 0) {\\n                for (uint16 j = 0; j < auth[i].channels.length; j++) {\\n\\n                    require(isEnabled(this.updateAuthorizations.selector, auth[i].channels[j]), \\\"not enabled\\\");\\n                    require(!ready || hasRole(_msgSender(), this.updateAuthorizations.selector, auth[i].channels[j]), \\\"not authorized\\\");\\n\\n                    _role[auth[i].selector].scope[auth[i].channels[j]][auth[i].account] = auth[i].grant;\\n                    emit UpdateAuthorization(\\n                                    auth[i].account,\\n                                    auth[i].selector,\\n                                    auth[i].channels[j],\\n                                    auth[i].grant\\n                                    );\\n                }\\n\\n            }\\n        }\\n    }\\n\\n    event ProjectSetup(address creator, address manager, string URI);\\n\\n    function setup(address manager, string calldata URI_, Channel[] memory channel, Authorization[] memory auth) external {\\n        require(!ready);\\n        URI = URI_;\\n        _nextTokenId = 1;\\n\\n        // all selector enable except acquire/redeem\\n        _role[this.addChannels.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.updateAuthorizations.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.widthdraw.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.widthdrawToken.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n        _role[this.approveToken.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n\\n        // default all roles for manager\\n        _role[this.addChannels.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.updateAuthorizations.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.widthdraw.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.widthdrawToken.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.approveToken.selector].scope[CHANNEL_LIMIT][manager] = true;\\n        _role[this.redeem.selector].scope[CHANNEL_LIMIT][manager] = true;\\n\\n        if (channel.length > 0) addChannels(channel);\\n        if (auth.length > 0) updateAuthorizations(auth);\\n        ready = true;\\n\\n        emit ProjectSetup(msg.sender, manager, URI);\\n\\n        // console.log('NFT_LIMIT', NFT_LIMIT);\\n        // console.log('CHANNEL_LIMIT', CHANNEL_LIMIT);\\n    }\\n\\n    // issuance channel => code ticket\\n    // Label -  Standard Rate, Early Bird, VIP, etc    // => add in meta ?\\n    // Quota/Max/supply\\n    // token => contract 0 means gas\\n\\n    struct NFT { // XXX more packing ?\\n        uint16 channelId;\\n        bytes16 stamp;\\n        bool redeemed;\\n        bool repudiated;\\n    }\\n\\n    mapping (uint48 => NFT) private _nft;\\n\\n    event Acquired(uint48 indexed tokenId, bytes16 stamp, uint256 salt, uint24 index);\\n\\n    function _acquire(address account, uint16 channelId, bytes16 stamp, uint256 salt, uint24 index) private {\\n        _nft[_nextTokenId] = NFT({\\n            channelId: channelId,\\n            stamp: stamp,\\n            redeemed: false,\\n            repudiated: false\\n        });\\n\\n        _mint(account, _nextTokenId);\\n\\n        emit Acquired(_nextTokenId, stamp, salt, index);\\n\\n        _nextTokenId++;\\n    }\\n\\n    struct Acquisition {\\n        uint16 channelId;\\n        uint16 qty;\\n        uint256 salt;\\n        bytes16[] stamps;\\n        // other behavior ...\\n    }\\n\\n    // todo airdrop ?\\n\\n    function _payToken(address token, uint256 amount) private {\\n        // XXX check interface\\n        // TODO possibility to have collector address\\n        require(IERC20(token).transferFrom(_msgSender(), address(this), amount));\\n    }\\n\\n    // too much duplicate with Transfer ... ?\\n    // event Acquired(address bearer, uint256 indexed tokenId);\\n\\n    function acquire(Acquisition[] memory acquisitions) payable public {\\n        uint24 index = 1;\\n        uint256 value = msg.value;\\n\\n        for (uint16 i = 0; i < acquisitions.length; i++) {\\n            require(_channel.length > acquisitions[i].channelId);\\n            require(isEnabled(this.acquire.selector, acquisitions[i].channelId), \\\"not enabled\\\");\\n\\n            // revert all acquisitions if not enough supply in one\\n            require(_channel[acquisitions[i].channelId].supply >= _channel[acquisitions[i].channelId].totalAcquired + acquisitions[i].qty, \\\"supply exhausted\\\");\\n\\n            // console.log(\\\"\\\\n[acquire] %s * channel %s\\\", acquisitions[i].qty, acquisitions[i].channelId);\\n\\n            for (uint16 j = 0; j < acquisitions[i].qty; j++) {\\n\\n                bytes16 stamp = acquisitions[i].stamps.length > j ? acquisitions[i].stamps[j] : bytes16(0);\\n\\n                _acquire(_msgSender(), acquisitions[i].channelId, stamp, acquisitions[i].salt, index);\\n\\n                index++;\\n            }\\n\\n            if (_channel[acquisitions[i].channelId].amount > 0) {\\n\\n                if (_channel[acquisitions[i].channelId].token == address(0)) {\\n                    require(value >= _channel[acquisitions[i].channelId].amount * acquisitions[i].qty, 'no enough funding');\\n                    // xxx uncheck\\n                    value -= _channel[acquisitions[i].channelId].amount * acquisitions[i].qty;\\n                } else {\\n                    _payToken(_channel[acquisitions[i].channelId].token, _channel[acquisitions[i].channelId].amount * acquisitions[i].qty);\\n                }\\n            }\\n\\n            _channel[acquisitions[i].channelId].totalAcquired += acquisitions[i].qty;\\n        }\\n    }\\n\\n    // TODO reset stamp (transfer or lost proof)\\n\\n    struct Redemption {\\n        uint16 tokenId;\\n        bytes32 proof;\\n        SignedCertificate certificate;\\n    }\\n\\n    event Redeemed(address bearer, uint48 indexed tokenId);\\n\\n    function _acceptanceFromIssuer(Redemption memory redemption, bytes4 selector) private view returns (bool) {\\n        if (hasRole(_msgSender(), selector, _nft[redemption.tokenId].channelId)) return true;\\n\\n        // we have a matching certificate\\n        if (redemption.certificate.tokenId == redemption.tokenId\\n            && redemption.certificate.memorandum.selector == selector\\n            && hasRole(redemption.certificate.from, selector, _nft[redemption.tokenId].channelId)\\n            ) {\\n            if (isValid(redemption.certificate)) return true;\\n        }\\n\\n        // TODO use delegation\\n        return false;\\n    }\\n\\n    function validTokenProof(uint16 tokenId, bytes32 proof) public view returns (bool) {\\n        return validProof(_nft[tokenId].stamp, proof);\\n    }\\n\\n    function _acceptanceFromBearer(Redemption memory redemption, bytes4 selector) private view returns (bool) {\\n        // always ok when tx.from is bearer\\n        if (ownerOf(redemption.tokenId) == _msgSender()) return true;\\n\\n        // we have a matching certificate\\n        if (redemption.certificate.tokenId == redemption.tokenId\\n            && redemption.certificate.memorandum.selector == selector) {\\n            // ok if valid & signed by rightful nft owner\\n            if (redemption.certificate.from == ownerOf(redemption.tokenId) && isValid(redemption.certificate)) return true;\\n        }\\n\\n        return validTokenProof(redemption.tokenId, redemption.proof);\\n    }\\n\\n    //  XXX add signature barrier before redemption => ? eg POA\\n    function redeem(Redemption[] memory redemptions) public {\\n        for (uint16 i = 0; i < redemptions.length; i++) {\\n            require(redemptions[i].tokenId < _nextTokenId);\\n            require(isEnabled(this.redeem.selector, _nft[redemptions[i].tokenId].channelId), \\\"not enabled\\\");\\n\\n            // XXX many redeem per nft possible ?\\n            require(!_nft[redemptions[i].tokenId].redeemed);\\n\\n            require(_acceptanceFromIssuer(redemptions[i], this.redeem.selector), \\\"not authorized by issuer\\\");\\n            require(_acceptanceFromBearer(redemptions[i], this.redeem.selector), \\\"not authorized by bearer\\\");\\n\\n            // option to burn NFT Rule X burn and supply++;\\n\\n            // XXX assets requirement on redeem, donation, pool incentive ?\\n            _nft[redemptions[i].tokenId].redeemed = true;\\n            _channel[_nft[redemptions[i].tokenId].channelId].totalRedeemed++;\\n            emit Redeemed(ownerOf(redemptions[i].tokenId), redemptions[i].tokenId);\\n        }\\n    }\\n\\n    function getRoles(bytes4[] memory selectors, address account) public view returns (bool[][] memory roles) {\\n        bool[][] memory r = new bool[][](_channel.length + 1);\\n\\n        for (uint16 i = 0; i < _channel.length; i++) {\\n            bool[] memory s = new bool[](selectors.length);\\n            for (uint16 j = 0; j < selectors.length; j++) {\\n                s[j] = _role[selectors[j]].scope[i][account];\\n            }\\n            r[i] = s;\\n        }\\n        bool[] memory s = new bool[](selectors.length);\\n        for (uint16 j = 0; j < selectors.length; j++) {\\n            s[j] = _role[selectors[j]].scope[CHANNEL_LIMIT][account];\\n        }\\n        r[_channel.length] = s;\\n        roles = r;\\n    }\\n    //_role[this.addChannels.selector].scope[CHANNEL_LIMIT][address(0)] = true;\\n\\n    function getInfos() public view returns (string memory uri, Channel[] memory channels, uint256[] memory balances) {\\n        uri = URI;\\n        channels = _channel;\\n        uint256[] memory balances_ = new uint256[](_channel.length);\\n\\n        for (uint16 i = 0; i < _channel.length; i++) {\\n            if (_channel[i].amount > 0) {\\n                if (_channel[i].token == address(0)) {\\n                    balances_[i] = address(this).balance;\\n                } else {\\n                    // XXX use try ?\\n                    //console.log('checking balance', i, _channel[i].token, balance);\\n                    balances_[i] = IERC20(_channel[i].token).balanceOf(address(this));\\n                }\\n            }\\n        }\\n        balances = balances_;\\n    }\\n\\n\\n    function getTokenInfos(uint48 tokenId) public view\\n        returns (address owner, uint16 channelId, bytes16 stamp, bool redeemed, uint256 nextTokenId) {\\n        owner = ownerOf(tokenId);\\n        channelId = _nft[tokenId].channelId;\\n        stamp = _nft[tokenId].stamp;\\n        redeemed = _nft[tokenId].redeemed;\\n        nextTokenId = _nextTokenId;\\n    }\\n\\n    // TODO onchain json + image from contract + metadata updates in the future\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        // TODO level 1, better attributes and link to dapp\\n        return URI;\\n    }\\n\\n    function widthdraw(address payable to, uint256 amount) external {\\n        require(isEnabled(this.widthdraw.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n        require(hasRole(_msgSender(), this.widthdraw.selector, CHANNEL_LIMIT));\\n        to.sendValue(amount);\\n    }\\n\\n    function approveToken(address token, address spender, uint256 amount) external {\\n        require(isEnabled(this.approveToken.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n        require(hasRole(_msgSender(), this.approveToken.selector, CHANNEL_LIMIT));\\n        IERC20(token).approve(spender, amount);\\n    }\\n\\n    // XXX or approveToken enough ?\\n    function widthdrawToken(\\n                            address token,\\n                            address to,\\n                            uint256 amount\\n                            ) external {\\n        require(isEnabled(this.widthdrawToken.selector, CHANNEL_LIMIT), \\\"not enabled\\\");\\n        require(hasRole(_msgSender(), this.widthdrawToken.selector, CHANNEL_LIMIT));\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    // TODO attachments erc20 + erc721 as module ?\\n}\\n\",\"keccak256\":\"0xd67fba2783fbaaf3dcc01de0d7d8ee1da40080e14446855d610c1b81d6c0f0ba\",\"license\":\"AGPL-3.0\"},\"contracts/modules/UseCertificate.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract UseCertificate {\\n\\n    struct Memorandum {\\n        bytes4 selector;\\n        uint32 expire;\\n    }\\n\\n    struct Certificate {\\n        address from;\\n        uint48 tokenId;\\n        Memorandum memorandum;\\n    }\\n\\n    struct SignedCertificate {\\n        address from;\\n        uint48 tokenId;\\n        Memorandum memorandum;\\n        bytes32 sigR;\\n        bytes32 sigS;\\n        uint8 sigV;\\n    }\\n\\n    string private constant EIP712_DOMAIN  = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n    string private constant MEMORANDUM_TYPE = \\\"Memorandum(bytes4 selector,uint32 expire)\\\";\\n    string private constant CERTIFICAT_TYPE = \\\"Certificate(address from,uint48 tokenId,Memorandum memorandum)Memorandum(bytes4 selector,uint32 expire)\\\";\\n\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(EIP712_DOMAIN));\\n    bytes32 private constant MEMORANDUM_TYPEHASH = keccak256(abi.encodePacked(MEMORANDUM_TYPE));\\n    bytes32 private constant CERTIFICAT_TYPEHASH = keccak256(abi.encodePacked(CERTIFICAT_TYPE));\\n\\n    // keeep public ?\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function separator() private view returns (bytes32) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        return keccak256(abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            keccak256(\\\"Rouge\\\"),\\n            keccak256(\\\"2\\\"), // string version\\n            getChainId(),\\n            address(this)\\n        ));\\n    }\\n\\n    function hashMemorandum(Memorandum memory memorandum) private pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MEMORANDUM_TYPEHASH,\\n            memorandum.selector,\\n            memorandum.expire\\n        ));\\n    }\\n\\n    function hashCertificate(Certificate memory message) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                separator(),\\n                keccak256(abi.encode(\\n                    CERTIFICAT_TYPEHASH,\\n                    message.from,\\n                    message.tokenId,\\n                    hashMemorandum(message.memorandum)\\n                ))\\n            ));\\n    }\\n\\n    function isValidSignature(SignedCertificate memory signed) public view returns (bool) {\\n        return ecrecover(\\n                         hashCertificate(Certificate({\\n                                 from: signed.from,\\n                                 tokenId: signed.tokenId,\\n                                 memorandum: signed.memorandum\\n                                 })\\n                             ), signed.sigV, signed.sigR, signed.sigS\\n                         ) == signed.from;\\n    }\\n\\n    function isValid(SignedCertificate memory signed) public view returns (bool) {\\n        // there is an expiration date\\n        if (signed.memorandum.expire > 0 && block.timestamp > signed.memorandum.expire) {\\n            // console.log(\\\"[warn] expired certificate\\\");\\n            return false;\\n        }\\n        return isValidSignature(signed);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x280522e080f6cffe95fcdf1ed42977670b341f31e8cd3591039e974678aa58ed\",\"license\":\"AGPL-3.0\"},\"contracts/modules/UseStampProof.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract UseStampProof {\\n\\n    // brute force is 128-bit\\n    function validProof(bytes16 stamp, bytes32 proof) public pure returns (bool valid) {\\n        return (bytes32(stamp) == keccak256(abi.encodePacked(proof)) >> 128 << 128);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcfc7de01d4aa00d0da094fa9367bb152013ddd65a238e3e4e1c8a68f7f6a72ca\",\"license\":\"AGPL-3.0\"},\"contracts/proxies/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\\n/// This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract Singleton {\\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\",\"keccak256\":\"0xc085aed60db1345d71c2cca80619043b6c910313b52fd845f5e050b312a06fa2\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526007805460ff60301b191690553480156200001e57600080fd5b5060405180604001604052806009815260200168149bdd59d94813919560ba1b815250604051806040016040528060038152602001622923a760e91b81525081600190816200006e919062000141565b5060026200007d828262000141565b50506007805460ff60301b19166601000000000000179055506200020d565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000c757607f821691505b602082108103620000e857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200013c57600081815260208120601f850160051c81016020861015620001175750805b601f850160051c820191505b81811015620001385782815560010162000123565b5050505b505050565b81516001600160401b038111156200015d576200015d6200009c565b62000175816200016e8454620000b2565b84620000ee565b602080601f831160018114620001ad5760008415620001945750858301515b600019600386901b1c1916600185901b17855562000138565b600085815260208120601f198616915b82811015620001de57888601518255948401946001909101908401620001bd565b5085821015620001fd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b615026806200021d6000396000f3fe60806040526004361061024f5760003560e01c806370850b1611610138578063c87b56dd116100b0578063e985e9c51161007f578063f0a5e40311610064578063f0a5e40314610703578063f6375c9014610723578063ffa1ad741461074357600080fd5b8063e985e9c51461069a578063eedff2c0146106e357600080fd5b8063c87b56dd1461061a578063da3e33971461063a578063dd901cae1461065a578063df0a31371461067a57600080fd5b806395d89b4111610107578063a22cb465116100ec578063a22cb465146105ba578063b88d4fde146105da578063c74b197c146105fa57600080fd5b806395d89b4114610585578063a126c3451461059a57600080fd5b806370850b161461051c57806370a08231146105325780637adbbfc3146105525780637d394b5b1461057257600080fd5b806329e41da5116101cb5780634d0a62371161019a5780635c3731371161017f5780635c373137146104b85780636352211e146104d8578063643d6dc0146104f857600080fd5b80634d0a62371461046f5780635634f2061461048f57600080fd5b806329e41da5146103a75780633408e470146103cf5780633e1a5c1d146103e257806342842e0e1461044f57600080fd5b8063095ea7b3116102225780631354b03d116102075780631354b03d1461034757806323b872dd1461036757806323ec2bbe1461038757600080fd5b8063095ea7b3146103105780631141d7de1461033257600080fd5b806301ffc9a71461025457806306fdde0314610289578063081812fc146102ab57806308234fae146102e3575b600080fd5b34801561026057600080fd5b5061027461026f366004613e1f565b61078c565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b5061029e610829565b6040516102809190613e8c565b3480156102b757600080fd5b506102cb6102c6366004613e9f565b6108bb565b6040516001600160a01b039091168152602001610280565b3480156102ef57600080fd5b506103036102fe366004613ffd565b6108e2565b60405161028091906140ae565b34801561031c57600080fd5b5061033061032b36600461413a565b610ba6565b005b34801561033e57600080fd5b5061029e610cdc565b34801561035357600080fd5b5061027461036236600461423f565b610d6a565b34801561037357600080fd5b5061033061038236600461425b565b610dac565b34801561039357600080fd5b506102746103a23660046142ae565b610e33565b3480156103b357600080fd5b506103c165ffffffffffff81565b604051908152602001610280565b3480156103db57600080fd5b50466103c1565b3480156103ee57600080fd5b506104026103fd3660046142f5565b610ea7565b604080516001600160a01b03909616865261ffff90941660208601526fffffffffffffffffffffffffffffffff19909216928401929092529015156060830152608082015260a001610280565b34801561045b57600080fd5b5061033061046a36600461425b565b610f14565b34801561047b57600080fd5b5061033061048a36600461425b565b610f2f565b34801561049b57600080fd5b506104a560001981565b60405161ffff9091168152602001610280565b3480156104c457600080fd5b506103306104d33660046143d6565b61105e565b3480156104e457600080fd5b506102cb6104f3366004613e9f565b6113c3565b34801561050457600080fd5b5061050d611428565b60405161028093929190614446565b34801561052857600080fd5b506103c161ffff81565b34801561053e57600080fd5b506103c161054d3660046144f1565b61174f565b34801561055e57600080fd5b5061027461056d36600461423f565b6117e9565b61033061058036600461452f565b6118b1565b34801561059157600080fd5b5061029e611f64565b3480156105a657600080fd5b506102746105b536600461469c565b611f73565b3480156105c657600080fd5b506103306105d53660046146d1565b611fc2565b3480156105e657600080fd5b506103306105f536600461470a565b611fcd565b34801561060657600080fd5b5061033061061536600461413a565b612055565b34801561062657600080fd5b5061029e610635366004613e9f565b612104565b34801561064657600080fd5b5061033061065536600461425b565b612223565b34801561066657600080fd5b50610330610675366004614924565b61230d565b34801561068657600080fd5b506103306106953660046149f3565b6125f4565b3480156106a657600080fd5b506102746106b5366004614a28565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156106ef57600080fd5b506102746106fe366004614a56565b6129e2565b34801561070f57600080fd5b5061027461071e366004614a8b565b6129f0565b34801561072f57600080fd5b5061033061073e366004614aa7565b612a17565b34801561074f57600080fd5b5061029e6040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806107ef57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061082357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461083890614b75565b80601f016020809104026020016040519081016040528092919081815260200182805461086490614b75565b80156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b5050505050905090565b60006108c682612de9565b506000908152600560205260409020546001600160a01b031690565b600a546060906000906108f6906001614bc5565b67ffffffffffffffff81111561090e5761090e613eb8565b60405190808252806020026020018201604052801561094157816020015b606081526020019060019003908161092c5790505b50905060005b600a5461ffff82161015610a84576000855167ffffffffffffffff81111561097157610971613eb8565b60405190808252806020026020018201604052801561099a578160200160208202803683370190505b50905060005b86518161ffff161015610a4d5760096000888361ffff16815181106109c7576109c7614bd8565b6020908102919091018101516001600160e01b0319168252818101929092526040908101600090812061ffff80881683529084528282206001600160a01b038b1683529093522054835160ff909116918491908416908110610a2b57610a2b614bd8565b9115156020928302919091019091015280610a4581614bee565b9150506109a0565b5080838361ffff1681518110610a6557610a65614bd8565b6020026020010181905250508080610a7c90614bee565b915050610947565b506000845167ffffffffffffffff811115610aa157610aa1613eb8565b604051908082528060200260200182016040528015610aca578160200160208202803683370190505b50905060005b85518161ffff161015610b7b5760096000878361ffff1681518110610af757610af7614bd8565b6020908102919091018101516001600160e01b0319168252818101929092526040908101600090812061ffff8083529084528282206001600160a01b038a1683529093522054835160ff909116918491908416908110610b5957610b59614bd8565b9115156020928302919091019091015280610b7381614bee565b915050610ad0565b50600a548251829184918110610b9357610b93614bd8565b6020908102919091010152509392505050565b6000610bb1826113c3565b9050806001600160a01b0316836001600160a01b031603610c3f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610c5b5750610c5b81336106b5565b610ccd5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610c36565b610cd78383612e50565b505050565b60088054610ce990614b75565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1590614b75565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b505050505081565b60008082604001516020015163ffffffff16118015610d96575081604001516020015163ffffffff1642115b15610da357506000919050565b610823826117e9565b610db63382612ed6565b610e285760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610c36565b610cd7838383612f55565b6001600160e01b03198216600090815260096020908152604080832061ffff8516845282528083206001600160a01b038716845290915281205460ff1615610e7d57506001610ea0565b61ffff82811614610e9c57610e958484600019610e33565b9050610ea0565b5060005b9392505050565b6000806000806000610ec08665ffffffffffff166113c3565b65ffffffffffff9687166000908152600b6020526040902054600754919861ffff82169862010000830460801b9850720100000000000000000000000000000000000090920460ff16965091169350915050565b610cd783838360405180602001604052806000815250611fcd565b610f5b7f4d0a6237000000000000000000000000000000000000000000000000000000006000196129e2565b610f955760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b610fc2337f4d0a623700000000000000000000000000000000000000000000000000000000600019610e33565b610fcb57600080fd5b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044015b6020604051808303816000875af1158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190614c0f565b50505050565b600081511161106c57600080fd5b8051600a5461ffff9161107e91614bc5565b1061108857600080fd5b60005b81518161ffff1610156113bf576110c47f5c373137000000000000000000000000000000000000000000000000000000006000196129e2565b6110fe5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6007546601000000000000900460ff1615806111425750611142337f5c37313700000000000000000000000000000000000000000000000000000000600019610e33565b61118e5760405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610c36565b6000828261ffff16815181106111a6576111a6614bd8565b60200260200101516020019065ffffffffffff16908165ffffffffffff16815250506000828261ffff16815181106111e0576111e0614bd8565b60200260200101516040019065ffffffffffff16908165ffffffffffff1681525050600a828261ffff168151811061121a5761121a614bd8565b6020908102919091018101518254600181810185556000948552938390208251600390920201805493830151604084015165ffffffffffff9081166c01000000000000000000000000027fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff9282166601000000000000027fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090971691909416179490941793909316178255606081015182840180546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000090921691909117905560800151600290910155600a5461131b9190614c2c565b61ffff167ffa42d262bbbc748bfc160b186cef43f4f880f4e43d0d58c62d572bab459512b5838361ffff168151811061135657611356614bd8565b602002602001015160000151848461ffff168151811061137857611378614bd8565b6020026020010151608001516040516113a592919065ffffffffffff929092168252602082015260400190565b60405180910390a2806113b781614bee565b91505061108b565b5050565b6000818152600360205260408120546001600160a01b0316806108235760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c36565b60608060606008805461143a90614b75565b80601f016020809104026020016040519081016040528092919081815260200182805461146690614b75565b80156114b35780601f10611488576101008083540402835291602001916114b3565b820191906000526020600020905b81548152906001019060200180831161149657829003601f168201915b50505050509250600a805480602002602001604051908101604052809291908181526020016000905b828210156115635760008481526020908190206040805160a08101825260038602909201805465ffffffffffff8082168552660100000000000082048116858701526c0100000000000000000000000090910416918301919091526001808201546001600160a01b03166060840152600290910154608083015290835290920191016114dc565b5050505091506000600a8054905067ffffffffffffffff81111561158957611589613eb8565b6040519080825280602002602001820160405280156115b2578160200160208202803683370190505b50905060005b600a5461ffff82161015611745576000600a8261ffff16815481106115df576115df614bd8565b90600052602060002090600302016002015411156117335760006001600160a01b0316600a8261ffff168154811061161957611619614bd8565b60009182526020909120600160039092020101546001600160a01b0316036116635747828261ffff168151811061165257611652614bd8565b602002602001018181525050611733565b600a8161ffff168154811061167a5761167a614bd8565b60009182526020909120600390910201600101546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190614c3f565b828261ffff168151811061172657611726614bd8565b6020026020010181815250505b8061173d81614bee565b9150506115b8565b5080915050909192565b60006001600160a01b0382166117cd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610c36565b506001600160a01b031660009081526004602052604090205490565b600081600001516001600160a01b0316600161183b604051806060016040528086600001516001600160a01b03168152602001866020015165ffffffffffff16815260200186604001518152506131a3565b60a0808601516060808801516080808a01516040805160008152602081018083529890985260ff9095169487019490945291850152830152016020604051602081039080840390855afa158015611896573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149050919050565b60013460005b83518161ffff16101561105857838161ffff16815181106118da576118da614bd8565b60200260200101516000015161ffff16600a80549050116118fa57600080fd5b61192c637d394b5b60e01b858361ffff168151811061191b5761191b614bd8565b6020026020010151600001516129e2565b6119665760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b838161ffff168151811061197c5761197c614bd8565b60200260200101516020015161ffff16600a858361ffff16815181106119a4576119a4614bd8565b60200260200101516000015161ffff16815481106119c4576119c4614bd8565b60009182526020909120600390910201546119f191906601000000000000900465ffffffffffff16614c58565b65ffffffffffff16600a858361ffff1681518110611a1157611a11614bd8565b60200260200101516000015161ffff1681548110611a3157611a31614bd8565b600091825260209091206003909102015465ffffffffffff161015611a985760405162461bcd60e51b815260206004820152601060248201527f737570706c7920657868617573746564000000000000000000000000000000006044820152606401610c36565b60005b848261ffff1681518110611ab157611ab1614bd8565b60200260200101516020015161ffff168161ffff161015611bb45760008161ffff16868461ffff1681518110611ae957611ae9614bd8565b6020026020010151606001515111611b02576000611b42565b858361ffff1681518110611b1857611b18614bd8565b6020026020010151606001518261ffff1681518110611b3957611b39614bd8565b60200260200101515b9050611b9333878561ffff1681518110611b5e57611b5e614bd8565b60200260200101516000015183898761ffff1681518110611b8157611b81614bd8565b602002602001015160400151896132ab565b84611b9d81614c7e565b955050508080611bac90614bee565b915050611a9b565b506000600a858361ffff1681518110611bcf57611bcf614bd8565b60200260200101516000015161ffff1681548110611bef57611bef614bd8565b9060005260206000209060030201600201541115611e9f5760006001600160a01b0316600a858361ffff1681518110611c2a57611c2a614bd8565b60200260200101516000015161ffff1681548110611c4a57611c4a614bd8565b60009182526020909120600160039092020101546001600160a01b031603611dc057838161ffff1681518110611c8257611c82614bd8565b60200260200101516020015161ffff16600a858361ffff1681518110611caa57611caa614bd8565b60200260200101516000015161ffff1681548110611cca57611cca614bd8565b906000526020600020906003020160020154611ce69190614c96565b821015611d355760405162461bcd60e51b815260206004820152601160248201527f6e6f20656e6f7567682066756e64696e670000000000000000000000000000006044820152606401610c36565b838161ffff1681518110611d4b57611d4b614bd8565b60200260200101516020015161ffff16600a858361ffff1681518110611d7357611d73614bd8565b60200260200101516000015161ffff1681548110611d9357611d93614bd8565b906000526020600020906003020160020154611daf9190614c96565b611db99083614c2c565b9150611e9f565b611e9f600a858361ffff1681518110611ddb57611ddb614bd8565b60200260200101516000015161ffff1681548110611dfb57611dfb614bd8565b906000526020600020906003020160010160009054906101000a90046001600160a01b0316858361ffff1681518110611e3657611e36614bd8565b60200260200101516020015161ffff16600a878561ffff1681518110611e5e57611e5e614bd8565b60200260200101516000015161ffff1681548110611e7e57611e7e614bd8565b906000526020600020906003020160020154611e9a9190614c96565b61347b565b838161ffff1681518110611eb557611eb5614bd8565b60200260200101516020015161ffff16600a858361ffff1681518110611edd57611edd614bd8565b60200260200101516000015161ffff1681548110611efd57611efd614bd8565b600091825260209091206003909102018054600690611f2f9084906601000000000000900465ffffffffffff16614c58565b92506101000a81548165ffffffffffff021916908365ffffffffffff1602179055508080611f5c90614bee565b9150506118b7565b60606002805461083890614b75565b600060808083604051602001611f8b91815260200190565b60405160208183030381529060405280519060200120901c901b836fffffffffffffffffffffffffffffffff191614905092915050565b6113bf33838361350b565b611fd73383612ed6565b6120495760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610c36565b611058848484846135d9565b6120817fc74b197c000000000000000000000000000000000000000000000000000000006000196129e2565b6120bb5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6120e8337fc74b197c00000000000000000000000000000000000000000000000000000000600019610e33565b6120f157600080fd5b6113bf6001600160a01b03831682613662565b6000818152600360205260409020546060906001600160a01b03166121915760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610c36565b6008805461219e90614b75565b80601f01602080910402602001604051908101604052809291908181526020018280546121ca90614b75565b80156122175780601f106121ec57610100808354040283529160200191612217565b820191906000526020600020905b8154815290600101906020018083116121fa57829003601f168201915b50505050509050919050565b61224f7fda3e3397000000000000000000000000000000000000000000000000000000006000196129e2565b6122895760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6122b6337fda3e339700000000000000000000000000000000000000000000000000000000600019610e33565b6122bf57600080fd5b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063095ea7b390604401611015565b6007546601000000000000900460ff161561232757600080fd5b6008612334848683614cfb565b50600780547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001660019081179091557f414f8037067d2d362b6e315be958c3b66d4e15bc02396827cec828876a543dd7805460ff1990811683179091557f72e5e5fffb1230bba3b5daddb0f58dccb1e1e60094c35a810282923478fe5a7d80548216831790557f06ffa7a29af4149a996aba7c1f2fa81de126513b3be65c861a4273cf0ed74f7a80548216831790557f88a38c94af4c92398d74410328c708d269d210568bccae6aa1d95cb2e6959aa180548216831790557f6cdbc52fa24effb8260917c28f956721adcff62a24990e868095bebf598087b880548216831790556001600160a01b03871660009081527f46eb72e44f8f425875f712ca3aa3222fd2659d7dd42f7c7295e5bc5186322b566020908152604080832080548516861790557fbfa1bbbb5412113857af50c788373bf697cab5b3e2de62691bbbfb42386bdf05825280832080548516861790557fc8b052e36352a20baa4e95ab194848256c7ef7d3bed1a938d3c8d94d4ab7f6cf825280832080548516861790557f90f718e4535fae59c16f7ef099360b460c8ffa52fa88963d7bc24f6308c941d3825280832080548516861790557f81d7bfe99e92d9cccc0c0b213fd1c1d063f749e2219cbacb4facac560401f6b8825280832080548516861790557fb5fb1ec644359d1df101885146ee5bd32e011f3def46ee7180b0f24d1a697a9f90915290208054909116909117905581511561256f5761256f8261105e565b80511561257f5761257f816125f4565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff1666010000000000001790556040517fb3712f2d2703aa26e6c5852e6b6390a146f0fea24af46d60565cb1c1c66c6eb5906125e59033908890600890614dbc565b60405180910390a15050505050565b60005b81518110156113bf57600082828151811061261457612614614bd8565b6020026020010151604001515111156129d05760005b82828151811061263c5761263c614bd8565b602002602001015160400151518161ffff1610156129ce5761269f63df0a313760e01b84848151811061267157612671614bd8565b6020026020010151604001518361ffff168151811061269257612692614bd8565b60200260200101516129e2565b6126d95760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6007546601000000000000900460ff16158061273c575061273c3363df0a313760e01b85858151811061270e5761270e614bd8565b6020026020010151604001518461ffff168151811061272f5761272f614bd8565b6020026020010151610e33565b6127885760405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610c36565b82828151811061279a5761279a614bd8565b602002602001015160600151600960008585815181106127bc576127bc614bd8565b6020026020010151602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600001600085858151811061282b5761282b614bd8565b6020026020010151604001518461ffff168151811061284c5761284c614bd8565b602002602001015161ffff1661ffff168152602001908152602001600020600085858151811061287e5761287e614bd8565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508282815181106128d3576128d3614bd8565b6020026020010151604001518161ffff16815181106128f4576128f4614bd8565b602002602001015161ffff1683838151811061291257612912614bd8565b6020026020010151602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684848151811061294f5761294f614bd8565b6020026020010151600001516001600160a01b03167f0baadb9c28bd04f0a6d1ab4d058e4e838ccd683c90c3dd7eceb644c1eef9f21e86868151811061299757612997614bd8565b6020026020010151606001516040516129b4911515815260200190565b60405180910390a4806129c681614bee565b91505061262a565b505b806129da81614e64565b9150506125f7565b6000610ea060008484610e33565b61ffff82166000908152600b6020526040812054610ea09062010000900460801b83611f73565b60005b81518161ffff1610156113bf57600754825165ffffffffffff90911690839061ffff8416908110612a4d57612a4d614bd8565b60200260200101516000015161ffff1610612a6757600080fd5b612ab563f6375c9060e01b600b6000858561ffff1681518110612a8c57612a8c614bd8565b6020908102919091018101515161ffff90811683529082019290925260400160002054166129e2565b612aef5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b600b6000838361ffff1681518110612b0957612b09614bd8565b6020908102919091018101515161ffff168252810191909152604001600020547201000000000000000000000000000000000000900460ff1615612b4c57600080fd5b612b7a828261ffff1681518110612b6557612b65614bd8565b602002602001015163f6375c9060e01b61377b565b612bc65760405162461bcd60e51b815260206004820152601860248201527f6e6f7420617574686f72697a65642062792069737375657200000000000000006044820152606401610c36565b612bf4828261ffff1681518110612bdf57612bdf614bd8565b602002602001015163f6375c9060e01b613841565b612c405760405162461bcd60e51b815260206004820152601860248201527f6e6f7420617574686f72697a65642062792062656172657200000000000000006044820152606401610c36565b6001600b6000848461ffff1681518110612c5c57612c5c614bd8565b60200260200101516000015161ffff1665ffffffffffff16815260200190815260200160002060000160126101000a81548160ff021916908315150217905550600a600b6000848461ffff1681518110612cb857612cb8614bd8565b6020908102919091018101515161ffff9081168352908201929092526040016000205482549116908110612cee57612cee614bd8565b6000918252602090912060039091020180546c01000000000000000000000000900465ffffffffffff1690600c612d2483614e7e565b91906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050818161ffff1681518110612d5d57612d5d614bd8565b60200260200101516000015161ffff167f13a5f6f4e9110e9f4d273e076ddc72525351be743d470b236e1b0910532a42f1612dbc848461ffff1681518110612da757612da7614bd8565b60200260200101516000015161ffff166113c3565b6040516001600160a01b03909116815260200160405180910390a280612de181614bee565b915050612a1a565b6000818152600360205260409020546001600160a01b0316612e4d5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c36565b50565b600081815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190612e9d826113c3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612ee2836113c3565b9050806001600160a01b0316846001600160a01b03161480612f2957506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80612f4d5750836001600160a01b0316612f42846108bb565b6001600160a01b0316145b949350505050565b826001600160a01b0316612f68826113c3565b6001600160a01b031614612fe45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c36565b6001600160a01b03821661305f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610c36565b61306c8383836001613909565b826001600160a01b031661307f826113c3565b6001600160a01b0316146130fb5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c36565b600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0387811680865260048552838620805460001901905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006131ad613991565b6040518060a0016040528060678152602001614f8a606791396040516020016131d69190614e99565b60405160208183030381529060405280519060200120836000015184602001516132038660400151613a5b565b6040805160208101959095526001600160a01b039093169284019290925265ffffffffffff166060830152608082015260a0016040516020818303038152906040528051906020012060405160200161328e9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050919050565b604080516080808201835261ffff87811683526fffffffffffffffffffffffffffffffff19871660208085019182526000858701818152606087018281526007805465ffffffffffff9081168552600b909552989092209651875494519151925195167fffffffffffffffffffffffffffff00000000000000000000000000000000000090941693909317620100009390951c92909202939093177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff167201000000000000000000000000000000000000911515919091027fffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffff1617730100000000000000000000000000000000000000911515919091021790915590546133d491879116613acf565b600754604080516fffffffffffffffffffffffffffffffff19861681526020810185905262ffffff841681830152905165ffffffffffff909216917f5a92380cd29188c9a432b557ec118165d07f2076731126de1201ce4e8d6a13be9181900360600190a26007805465ffffffffffff1690600061345183614e7e565b91906101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050505050565b6001600160a01b0382166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064016020604051808303816000875af11580156134de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135029190614c0f565b6113bf57600080fd5b816001600160a01b0316836001600160a01b03160361356c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c36565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6135e4848484612f55565b6135f084848484613c80565b6110585760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c36565b804710156136b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c36565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146136ff576040519150601f19603f3d011682016040523d82523d6000602084013e613704565b606091505b5050905080610cd75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c36565b60006137a033845161ffff9081166000908152600b6020526040902054859116610e33565b156137ad57506001610823565b826000015161ffff1683604001516020015165ffffffffffff161480156137e857506040838101510151516001600160e01b03198381169116145b8015613819575060408084015151845161ffff9081166000908152600b602052929092205461381992859116610e33565b156138385761382b8360400151610d6a565b1561383857506001610823565b50600092915050565b815160009033906138559061ffff166113c3565b6001600160a01b03160361386b57506001610823565b826000015161ffff1683604001516020015165ffffffffffff161480156138a657506040838101510151516001600160e01b03198381169116145b156138f75782516138ba9061ffff166113c3565b6001600160a01b03168360400151600001516001600160a01b03161480156138ea57506138ea8360400151610d6a565b156138f757506001610823565b610ea0836000015184602001516129f0565b6001811115611058576001600160a01b0384161561394f576001600160a01b03841660009081526004602052604081208054839290613949908490614c2c565b90915550505b6001600160a01b03831615611058576001600160a01b03831660009081526004602052604081208054839290613986908490614bc5565b909155505050505050565b6000604051806080016040528060528152602001614f38605291396040516020016139bc9190614e99565b604051602081830303815290604052805190602001207f49daf7256c779daecb4b152cd71e1e6199709f81ddeab7b28aec20b02f69e4257fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5613a1b4690565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000604051806060016040528060298152602001614f0f60299139604051602001613a869190614e99565b60408051601f198184030181528282528051602091820120855186830151928501919091526001600160e01b0319169183019190915263ffffffff16606082015260800161328e565b6001600160a01b038216613b255760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c36565b6000818152600360205260409020546001600160a01b031615613b8a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c36565b613b98600083836001613909565b6000818152600360205260409020546001600160a01b031615613bfd5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c36565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613dfe576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613cdd903390899088908890600401614eb5565b6020604051808303816000875af1925050508015613d18575060408051601f3d908101601f19168201909252613d1591810190614ef1565b60015b613dcb573d808015613d46576040519150601f19603f3d011682016040523d82523d6000602084013e613d4b565b606091505b508051600003613dc35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c36565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050612f4d565b506001949350505050565b6001600160e01b031981168114612e4d57600080fd5b600060208284031215613e3157600080fd5b8135610ea081613e09565b60005b83811015613e57578181015183820152602001613e3f565b50506000910152565b60008151808452613e78816020860160208601613e3c565b601f01601f19169290920160200192915050565b602081526000610ea06020830184613e60565b600060208284031215613eb157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b60405290565b6040805190810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b60405160a0810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b6040516080810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b6040516060810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fac57613fac613eb8565b604052919050565b600067ffffffffffffffff821115613fce57613fce613eb8565b5060051b60200190565b6001600160a01b0381168114612e4d57600080fd5b8035613ff881613fd8565b919050565b6000806040838503121561401057600080fd5b823567ffffffffffffffff81111561402757600080fd5b8301601f8101851361403857600080fd5b8035602061404d61404883613fb4565b613f83565b82815260059290921b8301810191818101908884111561406c57600080fd5b938201935b8385101561409357843561408481613e09565b82529382019390820190614071565b95506140a29050868201613fed565b93505050509250929050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561412c57888603603f19018552825180518088529088019088880190845b8181101561411657835115158352928a0192918a01916001016140f8565b50909750505093860193918601916001016140d6565b509398975050505050505050565b6000806040838503121561414d57600080fd5b823561415881613fd8565b946020939093013593505050565b803565ffffffffffff81168114613ff857600080fd5b803560ff81168114613ff857600080fd5b600081830360e08112156141a057600080fd5b6141a8613ece565b915082356141b581613fd8565b82526141c360208401614166565b60208301526040603f19820112156141da57600080fd5b506141e3613ef7565b60408301356141f181613e09565b8152606083013563ffffffff8116811461420a57600080fd5b60208201526040820152608082810135606083015260a08301359082015261423460c0830161417c565b60a082015292915050565b600060e0828403121561425157600080fd5b610ea0838361418d565b60008060006060848603121561427057600080fd5b833561427b81613fd8565b9250602084013561428b81613fd8565b929592945050506040919091013590565b803561ffff81168114613ff857600080fd5b6000806000606084860312156142c357600080fd5b83356142ce81613fd8565b925060208401356142de81613e09565b91506142ec6040850161429c565b90509250925092565b60006020828403121561430757600080fd5b610ea082614166565b600082601f83011261432157600080fd5b8135602061433161404883613fb4565b82815260a0928302850182019282820191908785111561435057600080fd5b8387015b858110156143c95781818a03121561436c5760008081fd5b614374613f1a565b61437d82614166565b815261438a868301614166565b86820152604061439b818401614166565b908201526060828101356143ae81613fd8565b90820152608082810135908201528452928401928101614354565b5090979650505050505050565b6000602082840312156143e857600080fd5b813567ffffffffffffffff8111156143ff57600080fd5b612f4d84828501614310565b600081518084526020808501945080840160005b8381101561443b5781518752958201959082019060010161441f565b509495945050505050565b6000606080835261445981840187613e60565b83810360208581019190915286518083528782019282019060005b818110156144d0578451805165ffffffffffff90811685528582015181168686015260408083015190911690850152868101516001600160a01b031687850152608090810151908401529383019360a090920191600101614474565b505085810360408701526144e4818861440b565b9998505050505050505050565b60006020828403121561450357600080fd5b8135610ea081613fd8565b80356fffffffffffffffffffffffffffffffff1981168114613ff857600080fd5b6000602080838503121561454257600080fd5b823567ffffffffffffffff8082111561455a57600080fd5b818501915085601f83011261456e57600080fd5b813561457c61404882613fb4565b81815260059190911b8301840190848101908883111561459b57600080fd5b8585015b8381101561468f578035858111156145b657600080fd5b86016080818c03601f190112156145cc57600080fd5b6145d4613f3d565b6145df89830161429c565b815260406145ee81840161429c565b8a83015260608301358183015260808301358881111561460e5760008081fd5b8084019350508c603f8401126146245760008081fd5b8983013561463461404882613fb4565b81815260059190911b84018201908b8101908f8311156146545760008081fd5b948301945b828610156146795761466a8661450e565b8252948c0194908c0190614659565b606085015250505084525091860191860161459f565b5098975050505050505050565b600080604083850312156146af57600080fd5b6141588361450e565b8015158114612e4d57600080fd5b8035613ff8816146b8565b600080604083850312156146e457600080fd5b82356146ef81613fd8565b915060208301356146ff816146b8565b809150509250929050565b6000806000806080858703121561472057600080fd5b843561472b81613fd8565b935060208581013561473c81613fd8565b935060408601359250606086013567ffffffffffffffff8082111561476057600080fd5b818801915088601f83011261477457600080fd5b81358181111561478657614786613eb8565b61479884601f19601f84011601613f83565b915080825289848285010111156147ae57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600082601f8301126147df57600080fd5b813560206147ef61404883613fb4565b82815260059290921b8401810191818101908684111561480e57600080fd5b8286015b8481101561491957803567ffffffffffffffff8082111561483257600080fd5b908801906080828b03601f1901121561484b5760008081fd5b614853613f3d565b8683013561486081613fd8565b815260408381013561487181613e09565b82890152606084810135848111156148895760008081fd5b85019350603f84018d1361489d5760008081fd5b888401356148ad61404882613fb4565b81815260059190911b85018301908a8101908f8311156148cd5760008081fd5b958401955b828710156148f2576148e38761429c565b8252958b0195908b01906148d2565b85850152506149059050608086016146c6565b908301525085525050918301918301614812565b509695505050505050565b60008060008060006080868803121561493c57600080fd5b853561494781613fd8565b9450602086013567ffffffffffffffff8082111561496457600080fd5b818801915088601f83011261497857600080fd5b81358181111561498757600080fd5b89602082850101111561499957600080fd5b6020830196508095505060408801359150808211156149b757600080fd5b6149c389838a01614310565b935060608801359150808211156149d957600080fd5b506149e6888289016147ce565b9150509295509295909350565b600060208284031215614a0557600080fd5b813567ffffffffffffffff811115614a1c57600080fd5b612f4d848285016147ce565b60008060408385031215614a3b57600080fd5b8235614a4681613fd8565b915060208301356146ff81613fd8565b60008060408385031215614a6957600080fd5b8235614a7481613e09565b9150614a826020840161429c565b90509250929050565b60008060408385031215614a9e57600080fd5b6141588361429c565b60006020808385031215614aba57600080fd5b823567ffffffffffffffff811115614ad157600080fd5b8301601f81018513614ae257600080fd5b8035614af061404882613fb4565b8181526101209182028301840191848201919088841115614b1057600080fd5b938501935b83851015614b695780858a031215614b2d5760008081fd5b614b35613f60565b614b3e8661429c565b815286860135878201526040614b568b82890161418d565b9082015283529384019391850191614b15565b50979650505050505050565b600181811c90821680614b8957607f821691505b602082108103614ba957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561082357610823614baf565b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818103614c0557614c05614baf565b6001019392505050565b600060208284031215614c2157600080fd5b8151610ea0816146b8565b8181038181111561082357610823614baf565b600060208284031215614c5157600080fd5b5051919050565b65ffffffffffff818116838216019080821115614c7757614c77614baf565b5092915050565b600062ffffff808316818103614c0557614c05614baf565b808202811582820484141761082357610823614baf565b601f821115610cd757600081815260208120601f850160051c81016020861015614cd45750805b601f850160051c820191505b81811015614cf357828155600101614ce0565b505050505050565b67ffffffffffffffff831115614d1357614d13613eb8565b614d2783614d218354614b75565b83614cad565b6000601f841160018114614d5b5760008515614d435750838201355b600019600387901b1c1916600186901b178355614db5565b600083815260209020601f19861690835b82811015614d8c5786850135825560209485019460019092019101614d6c565b5086821015614da95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60006001600160a01b03808616835260208186168185015260606040850152600091508454614dea81614b75565b8060608701526080600180841660008114614e0c5760018114614e2657614e54565b60ff198516838a01528284151560051b8a01019650614e54565b896000528560002060005b85811015614e4c5781548b8201860152908301908701614e31565b8a0184019750505b50949a9950505050505050505050565b60006000198203614e7757614e77614baf565b5060010190565b600065ffffffffffff808316818103614c0557614c05614baf565b60008251614eab818460208701613e3c565b9190910192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ee76080830184613e60565b9695505050505050565b600060208284031215614f0357600080fd5b8151610ea081613e0956fe4d656d6f72616e64756d286279746573342073656c6563746f722c75696e7433322065787069726529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429436572746966696361746528616464726573732066726f6d2c75696e74343820746f6b656e49642c4d656d6f72616e64756d206d656d6f72616e64756d294d656d6f72616e64756d286279746573342073656c6563746f722c75696e7433322065787069726529a264697066735822122082159a3caca3b486edcfbfdaf2803641d245d019234f11f500be04599afb89eb64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061024f5760003560e01c806370850b1611610138578063c87b56dd116100b0578063e985e9c51161007f578063f0a5e40311610064578063f0a5e40314610703578063f6375c9014610723578063ffa1ad741461074357600080fd5b8063e985e9c51461069a578063eedff2c0146106e357600080fd5b8063c87b56dd1461061a578063da3e33971461063a578063dd901cae1461065a578063df0a31371461067a57600080fd5b806395d89b4111610107578063a22cb465116100ec578063a22cb465146105ba578063b88d4fde146105da578063c74b197c146105fa57600080fd5b806395d89b4114610585578063a126c3451461059a57600080fd5b806370850b161461051c57806370a08231146105325780637adbbfc3146105525780637d394b5b1461057257600080fd5b806329e41da5116101cb5780634d0a62371161019a5780635c3731371161017f5780635c373137146104b85780636352211e146104d8578063643d6dc0146104f857600080fd5b80634d0a62371461046f5780635634f2061461048f57600080fd5b806329e41da5146103a75780633408e470146103cf5780633e1a5c1d146103e257806342842e0e1461044f57600080fd5b8063095ea7b3116102225780631354b03d116102075780631354b03d1461034757806323b872dd1461036757806323ec2bbe1461038757600080fd5b8063095ea7b3146103105780631141d7de1461033257600080fd5b806301ffc9a71461025457806306fdde0314610289578063081812fc146102ab57806308234fae146102e3575b600080fd5b34801561026057600080fd5b5061027461026f366004613e1f565b61078c565b60405190151581526020015b60405180910390f35b34801561029557600080fd5b5061029e610829565b6040516102809190613e8c565b3480156102b757600080fd5b506102cb6102c6366004613e9f565b6108bb565b6040516001600160a01b039091168152602001610280565b3480156102ef57600080fd5b506103036102fe366004613ffd565b6108e2565b60405161028091906140ae565b34801561031c57600080fd5b5061033061032b36600461413a565b610ba6565b005b34801561033e57600080fd5b5061029e610cdc565b34801561035357600080fd5b5061027461036236600461423f565b610d6a565b34801561037357600080fd5b5061033061038236600461425b565b610dac565b34801561039357600080fd5b506102746103a23660046142ae565b610e33565b3480156103b357600080fd5b506103c165ffffffffffff81565b604051908152602001610280565b3480156103db57600080fd5b50466103c1565b3480156103ee57600080fd5b506104026103fd3660046142f5565b610ea7565b604080516001600160a01b03909616865261ffff90941660208601526fffffffffffffffffffffffffffffffff19909216928401929092529015156060830152608082015260a001610280565b34801561045b57600080fd5b5061033061046a36600461425b565b610f14565b34801561047b57600080fd5b5061033061048a36600461425b565b610f2f565b34801561049b57600080fd5b506104a560001981565b60405161ffff9091168152602001610280565b3480156104c457600080fd5b506103306104d33660046143d6565b61105e565b3480156104e457600080fd5b506102cb6104f3366004613e9f565b6113c3565b34801561050457600080fd5b5061050d611428565b60405161028093929190614446565b34801561052857600080fd5b506103c161ffff81565b34801561053e57600080fd5b506103c161054d3660046144f1565b61174f565b34801561055e57600080fd5b5061027461056d36600461423f565b6117e9565b61033061058036600461452f565b6118b1565b34801561059157600080fd5b5061029e611f64565b3480156105a657600080fd5b506102746105b536600461469c565b611f73565b3480156105c657600080fd5b506103306105d53660046146d1565b611fc2565b3480156105e657600080fd5b506103306105f536600461470a565b611fcd565b34801561060657600080fd5b5061033061061536600461413a565b612055565b34801561062657600080fd5b5061029e610635366004613e9f565b612104565b34801561064657600080fd5b5061033061065536600461425b565b612223565b34801561066657600080fd5b50610330610675366004614924565b61230d565b34801561068657600080fd5b506103306106953660046149f3565b6125f4565b3480156106a657600080fd5b506102746106b5366004614a28565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156106ef57600080fd5b506102746106fe366004614a56565b6129e2565b34801561070f57600080fd5b5061027461071e366004614a8b565b6129f0565b34801561072f57600080fd5b5061033061073e366004614aa7565b612a17565b34801561074f57600080fd5b5061029e6040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806107ef57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061082357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461083890614b75565b80601f016020809104026020016040519081016040528092919081815260200182805461086490614b75565b80156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b5050505050905090565b60006108c682612de9565b506000908152600560205260409020546001600160a01b031690565b600a546060906000906108f6906001614bc5565b67ffffffffffffffff81111561090e5761090e613eb8565b60405190808252806020026020018201604052801561094157816020015b606081526020019060019003908161092c5790505b50905060005b600a5461ffff82161015610a84576000855167ffffffffffffffff81111561097157610971613eb8565b60405190808252806020026020018201604052801561099a578160200160208202803683370190505b50905060005b86518161ffff161015610a4d5760096000888361ffff16815181106109c7576109c7614bd8565b6020908102919091018101516001600160e01b0319168252818101929092526040908101600090812061ffff80881683529084528282206001600160a01b038b1683529093522054835160ff909116918491908416908110610a2b57610a2b614bd8565b9115156020928302919091019091015280610a4581614bee565b9150506109a0565b5080838361ffff1681518110610a6557610a65614bd8565b6020026020010181905250508080610a7c90614bee565b915050610947565b506000845167ffffffffffffffff811115610aa157610aa1613eb8565b604051908082528060200260200182016040528015610aca578160200160208202803683370190505b50905060005b85518161ffff161015610b7b5760096000878361ffff1681518110610af757610af7614bd8565b6020908102919091018101516001600160e01b0319168252818101929092526040908101600090812061ffff8083529084528282206001600160a01b038a1683529093522054835160ff909116918491908416908110610b5957610b59614bd8565b9115156020928302919091019091015280610b7381614bee565b915050610ad0565b50600a548251829184918110610b9357610b93614bd8565b6020908102919091010152509392505050565b6000610bb1826113c3565b9050806001600160a01b0316836001600160a01b031603610c3f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610c5b5750610c5b81336106b5565b610ccd5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610c36565b610cd78383612e50565b505050565b60088054610ce990614b75565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1590614b75565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b505050505081565b60008082604001516020015163ffffffff16118015610d96575081604001516020015163ffffffff1642115b15610da357506000919050565b610823826117e9565b610db63382612ed6565b610e285760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610c36565b610cd7838383612f55565b6001600160e01b03198216600090815260096020908152604080832061ffff8516845282528083206001600160a01b038716845290915281205460ff1615610e7d57506001610ea0565b61ffff82811614610e9c57610e958484600019610e33565b9050610ea0565b5060005b9392505050565b6000806000806000610ec08665ffffffffffff166113c3565b65ffffffffffff9687166000908152600b6020526040902054600754919861ffff82169862010000830460801b9850720100000000000000000000000000000000000090920460ff16965091169350915050565b610cd783838360405180602001604052806000815250611fcd565b610f5b7f4d0a6237000000000000000000000000000000000000000000000000000000006000196129e2565b610f955760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b610fc2337f4d0a623700000000000000000000000000000000000000000000000000000000600019610e33565b610fcb57600080fd5b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044015b6020604051808303816000875af1158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190614c0f565b50505050565b600081511161106c57600080fd5b8051600a5461ffff9161107e91614bc5565b1061108857600080fd5b60005b81518161ffff1610156113bf576110c47f5c373137000000000000000000000000000000000000000000000000000000006000196129e2565b6110fe5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6007546601000000000000900460ff1615806111425750611142337f5c37313700000000000000000000000000000000000000000000000000000000600019610e33565b61118e5760405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610c36565b6000828261ffff16815181106111a6576111a6614bd8565b60200260200101516020019065ffffffffffff16908165ffffffffffff16815250506000828261ffff16815181106111e0576111e0614bd8565b60200260200101516040019065ffffffffffff16908165ffffffffffff1681525050600a828261ffff168151811061121a5761121a614bd8565b6020908102919091018101518254600181810185556000948552938390208251600390920201805493830151604084015165ffffffffffff9081166c01000000000000000000000000027fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff9282166601000000000000027fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090971691909416179490941793909316178255606081015182840180546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000090921691909117905560800151600290910155600a5461131b9190614c2c565b61ffff167ffa42d262bbbc748bfc160b186cef43f4f880f4e43d0d58c62d572bab459512b5838361ffff168151811061135657611356614bd8565b602002602001015160000151848461ffff168151811061137857611378614bd8565b6020026020010151608001516040516113a592919065ffffffffffff929092168252602082015260400190565b60405180910390a2806113b781614bee565b91505061108b565b5050565b6000818152600360205260408120546001600160a01b0316806108235760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c36565b60608060606008805461143a90614b75565b80601f016020809104026020016040519081016040528092919081815260200182805461146690614b75565b80156114b35780601f10611488576101008083540402835291602001916114b3565b820191906000526020600020905b81548152906001019060200180831161149657829003601f168201915b50505050509250600a805480602002602001604051908101604052809291908181526020016000905b828210156115635760008481526020908190206040805160a08101825260038602909201805465ffffffffffff8082168552660100000000000082048116858701526c0100000000000000000000000090910416918301919091526001808201546001600160a01b03166060840152600290910154608083015290835290920191016114dc565b5050505091506000600a8054905067ffffffffffffffff81111561158957611589613eb8565b6040519080825280602002602001820160405280156115b2578160200160208202803683370190505b50905060005b600a5461ffff82161015611745576000600a8261ffff16815481106115df576115df614bd8565b90600052602060002090600302016002015411156117335760006001600160a01b0316600a8261ffff168154811061161957611619614bd8565b60009182526020909120600160039092020101546001600160a01b0316036116635747828261ffff168151811061165257611652614bd8565b602002602001018181525050611733565b600a8161ffff168154811061167a5761167a614bd8565b60009182526020909120600390910201600101546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190614c3f565b828261ffff168151811061172657611726614bd8565b6020026020010181815250505b8061173d81614bee565b9150506115b8565b5080915050909192565b60006001600160a01b0382166117cd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610c36565b506001600160a01b031660009081526004602052604090205490565b600081600001516001600160a01b0316600161183b604051806060016040528086600001516001600160a01b03168152602001866020015165ffffffffffff16815260200186604001518152506131a3565b60a0808601516060808801516080808a01516040805160008152602081018083529890985260ff9095169487019490945291850152830152016020604051602081039080840390855afa158015611896573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149050919050565b60013460005b83518161ffff16101561105857838161ffff16815181106118da576118da614bd8565b60200260200101516000015161ffff16600a80549050116118fa57600080fd5b61192c637d394b5b60e01b858361ffff168151811061191b5761191b614bd8565b6020026020010151600001516129e2565b6119665760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b838161ffff168151811061197c5761197c614bd8565b60200260200101516020015161ffff16600a858361ffff16815181106119a4576119a4614bd8565b60200260200101516000015161ffff16815481106119c4576119c4614bd8565b60009182526020909120600390910201546119f191906601000000000000900465ffffffffffff16614c58565b65ffffffffffff16600a858361ffff1681518110611a1157611a11614bd8565b60200260200101516000015161ffff1681548110611a3157611a31614bd8565b600091825260209091206003909102015465ffffffffffff161015611a985760405162461bcd60e51b815260206004820152601060248201527f737570706c7920657868617573746564000000000000000000000000000000006044820152606401610c36565b60005b848261ffff1681518110611ab157611ab1614bd8565b60200260200101516020015161ffff168161ffff161015611bb45760008161ffff16868461ffff1681518110611ae957611ae9614bd8565b6020026020010151606001515111611b02576000611b42565b858361ffff1681518110611b1857611b18614bd8565b6020026020010151606001518261ffff1681518110611b3957611b39614bd8565b60200260200101515b9050611b9333878561ffff1681518110611b5e57611b5e614bd8565b60200260200101516000015183898761ffff1681518110611b8157611b81614bd8565b602002602001015160400151896132ab565b84611b9d81614c7e565b955050508080611bac90614bee565b915050611a9b565b506000600a858361ffff1681518110611bcf57611bcf614bd8565b60200260200101516000015161ffff1681548110611bef57611bef614bd8565b9060005260206000209060030201600201541115611e9f5760006001600160a01b0316600a858361ffff1681518110611c2a57611c2a614bd8565b60200260200101516000015161ffff1681548110611c4a57611c4a614bd8565b60009182526020909120600160039092020101546001600160a01b031603611dc057838161ffff1681518110611c8257611c82614bd8565b60200260200101516020015161ffff16600a858361ffff1681518110611caa57611caa614bd8565b60200260200101516000015161ffff1681548110611cca57611cca614bd8565b906000526020600020906003020160020154611ce69190614c96565b821015611d355760405162461bcd60e51b815260206004820152601160248201527f6e6f20656e6f7567682066756e64696e670000000000000000000000000000006044820152606401610c36565b838161ffff1681518110611d4b57611d4b614bd8565b60200260200101516020015161ffff16600a858361ffff1681518110611d7357611d73614bd8565b60200260200101516000015161ffff1681548110611d9357611d93614bd8565b906000526020600020906003020160020154611daf9190614c96565b611db99083614c2c565b9150611e9f565b611e9f600a858361ffff1681518110611ddb57611ddb614bd8565b60200260200101516000015161ffff1681548110611dfb57611dfb614bd8565b906000526020600020906003020160010160009054906101000a90046001600160a01b0316858361ffff1681518110611e3657611e36614bd8565b60200260200101516020015161ffff16600a878561ffff1681518110611e5e57611e5e614bd8565b60200260200101516000015161ffff1681548110611e7e57611e7e614bd8565b906000526020600020906003020160020154611e9a9190614c96565b61347b565b838161ffff1681518110611eb557611eb5614bd8565b60200260200101516020015161ffff16600a858361ffff1681518110611edd57611edd614bd8565b60200260200101516000015161ffff1681548110611efd57611efd614bd8565b600091825260209091206003909102018054600690611f2f9084906601000000000000900465ffffffffffff16614c58565b92506101000a81548165ffffffffffff021916908365ffffffffffff1602179055508080611f5c90614bee565b9150506118b7565b60606002805461083890614b75565b600060808083604051602001611f8b91815260200190565b60405160208183030381529060405280519060200120901c901b836fffffffffffffffffffffffffffffffff191614905092915050565b6113bf33838361350b565b611fd73383612ed6565b6120495760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610c36565b611058848484846135d9565b6120817fc74b197c000000000000000000000000000000000000000000000000000000006000196129e2565b6120bb5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6120e8337fc74b197c00000000000000000000000000000000000000000000000000000000600019610e33565b6120f157600080fd5b6113bf6001600160a01b03831682613662565b6000818152600360205260409020546060906001600160a01b03166121915760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610c36565b6008805461219e90614b75565b80601f01602080910402602001604051908101604052809291908181526020018280546121ca90614b75565b80156122175780601f106121ec57610100808354040283529160200191612217565b820191906000526020600020905b8154815290600101906020018083116121fa57829003601f168201915b50505050509050919050565b61224f7fda3e3397000000000000000000000000000000000000000000000000000000006000196129e2565b6122895760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6122b6337fda3e339700000000000000000000000000000000000000000000000000000000600019610e33565b6122bf57600080fd5b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063095ea7b390604401611015565b6007546601000000000000900460ff161561232757600080fd5b6008612334848683614cfb565b50600780547fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001660019081179091557f414f8037067d2d362b6e315be958c3b66d4e15bc02396827cec828876a543dd7805460ff1990811683179091557f72e5e5fffb1230bba3b5daddb0f58dccb1e1e60094c35a810282923478fe5a7d80548216831790557f06ffa7a29af4149a996aba7c1f2fa81de126513b3be65c861a4273cf0ed74f7a80548216831790557f88a38c94af4c92398d74410328c708d269d210568bccae6aa1d95cb2e6959aa180548216831790557f6cdbc52fa24effb8260917c28f956721adcff62a24990e868095bebf598087b880548216831790556001600160a01b03871660009081527f46eb72e44f8f425875f712ca3aa3222fd2659d7dd42f7c7295e5bc5186322b566020908152604080832080548516861790557fbfa1bbbb5412113857af50c788373bf697cab5b3e2de62691bbbfb42386bdf05825280832080548516861790557fc8b052e36352a20baa4e95ab194848256c7ef7d3bed1a938d3c8d94d4ab7f6cf825280832080548516861790557f90f718e4535fae59c16f7ef099360b460c8ffa52fa88963d7bc24f6308c941d3825280832080548516861790557f81d7bfe99e92d9cccc0c0b213fd1c1d063f749e2219cbacb4facac560401f6b8825280832080548516861790557fb5fb1ec644359d1df101885146ee5bd32e011f3def46ee7180b0f24d1a697a9f90915290208054909116909117905581511561256f5761256f8261105e565b80511561257f5761257f816125f4565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff1666010000000000001790556040517fb3712f2d2703aa26e6c5852e6b6390a146f0fea24af46d60565cb1c1c66c6eb5906125e59033908890600890614dbc565b60405180910390a15050505050565b60005b81518110156113bf57600082828151811061261457612614614bd8565b6020026020010151604001515111156129d05760005b82828151811061263c5761263c614bd8565b602002602001015160400151518161ffff1610156129ce5761269f63df0a313760e01b84848151811061267157612671614bd8565b6020026020010151604001518361ffff168151811061269257612692614bd8565b60200260200101516129e2565b6126d95760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b6007546601000000000000900460ff16158061273c575061273c3363df0a313760e01b85858151811061270e5761270e614bd8565b6020026020010151604001518461ffff168151811061272f5761272f614bd8565b6020026020010151610e33565b6127885760405162461bcd60e51b815260206004820152600e60248201527f6e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610c36565b82828151811061279a5761279a614bd8565b602002602001015160600151600960008585815181106127bc576127bc614bd8565b6020026020010151602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600001600085858151811061282b5761282b614bd8565b6020026020010151604001518461ffff168151811061284c5761284c614bd8565b602002602001015161ffff1661ffff168152602001908152602001600020600085858151811061287e5761287e614bd8565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508282815181106128d3576128d3614bd8565b6020026020010151604001518161ffff16815181106128f4576128f4614bd8565b602002602001015161ffff1683838151811061291257612912614bd8565b6020026020010151602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684848151811061294f5761294f614bd8565b6020026020010151600001516001600160a01b03167f0baadb9c28bd04f0a6d1ab4d058e4e838ccd683c90c3dd7eceb644c1eef9f21e86868151811061299757612997614bd8565b6020026020010151606001516040516129b4911515815260200190565b60405180910390a4806129c681614bee565b91505061262a565b505b806129da81614e64565b9150506125f7565b6000610ea060008484610e33565b61ffff82166000908152600b6020526040812054610ea09062010000900460801b83611f73565b60005b81518161ffff1610156113bf57600754825165ffffffffffff90911690839061ffff8416908110612a4d57612a4d614bd8565b60200260200101516000015161ffff1610612a6757600080fd5b612ab563f6375c9060e01b600b6000858561ffff1681518110612a8c57612a8c614bd8565b6020908102919091018101515161ffff90811683529082019290925260400160002054166129e2565b612aef5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08195b98589b195960aa1b6044820152606401610c36565b600b6000838361ffff1681518110612b0957612b09614bd8565b6020908102919091018101515161ffff168252810191909152604001600020547201000000000000000000000000000000000000900460ff1615612b4c57600080fd5b612b7a828261ffff1681518110612b6557612b65614bd8565b602002602001015163f6375c9060e01b61377b565b612bc65760405162461bcd60e51b815260206004820152601860248201527f6e6f7420617574686f72697a65642062792069737375657200000000000000006044820152606401610c36565b612bf4828261ffff1681518110612bdf57612bdf614bd8565b602002602001015163f6375c9060e01b613841565b612c405760405162461bcd60e51b815260206004820152601860248201527f6e6f7420617574686f72697a65642062792062656172657200000000000000006044820152606401610c36565b6001600b6000848461ffff1681518110612c5c57612c5c614bd8565b60200260200101516000015161ffff1665ffffffffffff16815260200190815260200160002060000160126101000a81548160ff021916908315150217905550600a600b6000848461ffff1681518110612cb857612cb8614bd8565b6020908102919091018101515161ffff9081168352908201929092526040016000205482549116908110612cee57612cee614bd8565b6000918252602090912060039091020180546c01000000000000000000000000900465ffffffffffff1690600c612d2483614e7e565b91906101000a81548165ffffffffffff021916908365ffffffffffff16021790555050818161ffff1681518110612d5d57612d5d614bd8565b60200260200101516000015161ffff167f13a5f6f4e9110e9f4d273e076ddc72525351be743d470b236e1b0910532a42f1612dbc848461ffff1681518110612da757612da7614bd8565b60200260200101516000015161ffff166113c3565b6040516001600160a01b03909116815260200160405180910390a280612de181614bee565b915050612a1a565b6000818152600360205260409020546001600160a01b0316612e4d5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610c36565b50565b600081815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190612e9d826113c3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612ee2836113c3565b9050806001600160a01b0316846001600160a01b03161480612f2957506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80612f4d5750836001600160a01b0316612f42846108bb565b6001600160a01b0316145b949350505050565b826001600160a01b0316612f68826113c3565b6001600160a01b031614612fe45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c36565b6001600160a01b03821661305f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610c36565b61306c8383836001613909565b826001600160a01b031661307f826113c3565b6001600160a01b0316146130fb5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c36565b600081815260056020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0387811680865260048552838620805460001901905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006131ad613991565b6040518060a0016040528060678152602001614f8a606791396040516020016131d69190614e99565b60405160208183030381529060405280519060200120836000015184602001516132038660400151613a5b565b6040805160208101959095526001600160a01b039093169284019290925265ffffffffffff166060830152608082015260a0016040516020818303038152906040528051906020012060405160200161328e9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050919050565b604080516080808201835261ffff87811683526fffffffffffffffffffffffffffffffff19871660208085019182526000858701818152606087018281526007805465ffffffffffff9081168552600b909552989092209651875494519151925195167fffffffffffffffffffffffffffff00000000000000000000000000000000000090941693909317620100009390951c92909202939093177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff167201000000000000000000000000000000000000911515919091027fffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffff1617730100000000000000000000000000000000000000911515919091021790915590546133d491879116613acf565b600754604080516fffffffffffffffffffffffffffffffff19861681526020810185905262ffffff841681830152905165ffffffffffff909216917f5a92380cd29188c9a432b557ec118165d07f2076731126de1201ce4e8d6a13be9181900360600190a26007805465ffffffffffff1690600061345183614e7e565b91906101000a81548165ffffffffffff021916908365ffffffffffff160217905550505050505050565b6001600160a01b0382166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064016020604051808303816000875af11580156134de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135029190614c0f565b6113bf57600080fd5b816001600160a01b0316836001600160a01b03160361356c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c36565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6135e4848484612f55565b6135f084848484613c80565b6110585760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c36565b804710156136b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c36565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146136ff576040519150601f19603f3d011682016040523d82523d6000602084013e613704565b606091505b5050905080610cd75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c36565b60006137a033845161ffff9081166000908152600b6020526040902054859116610e33565b156137ad57506001610823565b826000015161ffff1683604001516020015165ffffffffffff161480156137e857506040838101510151516001600160e01b03198381169116145b8015613819575060408084015151845161ffff9081166000908152600b602052929092205461381992859116610e33565b156138385761382b8360400151610d6a565b1561383857506001610823565b50600092915050565b815160009033906138559061ffff166113c3565b6001600160a01b03160361386b57506001610823565b826000015161ffff1683604001516020015165ffffffffffff161480156138a657506040838101510151516001600160e01b03198381169116145b156138f75782516138ba9061ffff166113c3565b6001600160a01b03168360400151600001516001600160a01b03161480156138ea57506138ea8360400151610d6a565b156138f757506001610823565b610ea0836000015184602001516129f0565b6001811115611058576001600160a01b0384161561394f576001600160a01b03841660009081526004602052604081208054839290613949908490614c2c565b90915550505b6001600160a01b03831615611058576001600160a01b03831660009081526004602052604081208054839290613986908490614bc5565b909155505050505050565b6000604051806080016040528060528152602001614f38605291396040516020016139bc9190614e99565b604051602081830303815290604052805190602001207f49daf7256c779daecb4b152cd71e1e6199709f81ddeab7b28aec20b02f69e4257fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5613a1b4690565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000604051806060016040528060298152602001614f0f60299139604051602001613a869190614e99565b60408051601f198184030181528282528051602091820120855186830151928501919091526001600160e01b0319169183019190915263ffffffff16606082015260800161328e565b6001600160a01b038216613b255760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c36565b6000818152600360205260409020546001600160a01b031615613b8a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c36565b613b98600083836001613909565b6000818152600360205260409020546001600160a01b031615613bfd5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c36565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613dfe576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613cdd903390899088908890600401614eb5565b6020604051808303816000875af1925050508015613d18575060408051601f3d908101601f19168201909252613d1591810190614ef1565b60015b613dcb573d808015613d46576040519150601f19603f3d011682016040523d82523d6000602084013e613d4b565b606091505b508051600003613dc35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c36565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050612f4d565b506001949350505050565b6001600160e01b031981168114612e4d57600080fd5b600060208284031215613e3157600080fd5b8135610ea081613e09565b60005b83811015613e57578181015183820152602001613e3f565b50506000910152565b60008151808452613e78816020860160208601613e3c565b601f01601f19169290920160200192915050565b602081526000610ea06020830184613e60565b600060208284031215613eb157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b60405290565b6040805190810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b60405160a0810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b6040516080810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b6040516060810167ffffffffffffffff81118282101715613ef157613ef1613eb8565b604051601f8201601f1916810167ffffffffffffffff81118282101715613fac57613fac613eb8565b604052919050565b600067ffffffffffffffff821115613fce57613fce613eb8565b5060051b60200190565b6001600160a01b0381168114612e4d57600080fd5b8035613ff881613fd8565b919050565b6000806040838503121561401057600080fd5b823567ffffffffffffffff81111561402757600080fd5b8301601f8101851361403857600080fd5b8035602061404d61404883613fb4565b613f83565b82815260059290921b8301810191818101908884111561406c57600080fd5b938201935b8385101561409357843561408481613e09565b82529382019390820190614071565b95506140a29050868201613fed565b93505050509250929050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561412c57888603603f19018552825180518088529088019088880190845b8181101561411657835115158352928a0192918a01916001016140f8565b50909750505093860193918601916001016140d6565b509398975050505050505050565b6000806040838503121561414d57600080fd5b823561415881613fd8565b946020939093013593505050565b803565ffffffffffff81168114613ff857600080fd5b803560ff81168114613ff857600080fd5b600081830360e08112156141a057600080fd5b6141a8613ece565b915082356141b581613fd8565b82526141c360208401614166565b60208301526040603f19820112156141da57600080fd5b506141e3613ef7565b60408301356141f181613e09565b8152606083013563ffffffff8116811461420a57600080fd5b60208201526040820152608082810135606083015260a08301359082015261423460c0830161417c565b60a082015292915050565b600060e0828403121561425157600080fd5b610ea0838361418d565b60008060006060848603121561427057600080fd5b833561427b81613fd8565b9250602084013561428b81613fd8565b929592945050506040919091013590565b803561ffff81168114613ff857600080fd5b6000806000606084860312156142c357600080fd5b83356142ce81613fd8565b925060208401356142de81613e09565b91506142ec6040850161429c565b90509250925092565b60006020828403121561430757600080fd5b610ea082614166565b600082601f83011261432157600080fd5b8135602061433161404883613fb4565b82815260a0928302850182019282820191908785111561435057600080fd5b8387015b858110156143c95781818a03121561436c5760008081fd5b614374613f1a565b61437d82614166565b815261438a868301614166565b86820152604061439b818401614166565b908201526060828101356143ae81613fd8565b90820152608082810135908201528452928401928101614354565b5090979650505050505050565b6000602082840312156143e857600080fd5b813567ffffffffffffffff8111156143ff57600080fd5b612f4d84828501614310565b600081518084526020808501945080840160005b8381101561443b5781518752958201959082019060010161441f565b509495945050505050565b6000606080835261445981840187613e60565b83810360208581019190915286518083528782019282019060005b818110156144d0578451805165ffffffffffff90811685528582015181168686015260408083015190911690850152868101516001600160a01b031687850152608090810151908401529383019360a090920191600101614474565b505085810360408701526144e4818861440b565b9998505050505050505050565b60006020828403121561450357600080fd5b8135610ea081613fd8565b80356fffffffffffffffffffffffffffffffff1981168114613ff857600080fd5b6000602080838503121561454257600080fd5b823567ffffffffffffffff8082111561455a57600080fd5b818501915085601f83011261456e57600080fd5b813561457c61404882613fb4565b81815260059190911b8301840190848101908883111561459b57600080fd5b8585015b8381101561468f578035858111156145b657600080fd5b86016080818c03601f190112156145cc57600080fd5b6145d4613f3d565b6145df89830161429c565b815260406145ee81840161429c565b8a83015260608301358183015260808301358881111561460e5760008081fd5b8084019350508c603f8401126146245760008081fd5b8983013561463461404882613fb4565b81815260059190911b84018201908b8101908f8311156146545760008081fd5b948301945b828610156146795761466a8661450e565b8252948c0194908c0190614659565b606085015250505084525091860191860161459f565b5098975050505050505050565b600080604083850312156146af57600080fd5b6141588361450e565b8015158114612e4d57600080fd5b8035613ff8816146b8565b600080604083850312156146e457600080fd5b82356146ef81613fd8565b915060208301356146ff816146b8565b809150509250929050565b6000806000806080858703121561472057600080fd5b843561472b81613fd8565b935060208581013561473c81613fd8565b935060408601359250606086013567ffffffffffffffff8082111561476057600080fd5b818801915088601f83011261477457600080fd5b81358181111561478657614786613eb8565b61479884601f19601f84011601613f83565b915080825289848285010111156147ae57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600082601f8301126147df57600080fd5b813560206147ef61404883613fb4565b82815260059290921b8401810191818101908684111561480e57600080fd5b8286015b8481101561491957803567ffffffffffffffff8082111561483257600080fd5b908801906080828b03601f1901121561484b5760008081fd5b614853613f3d565b8683013561486081613fd8565b815260408381013561487181613e09565b82890152606084810135848111156148895760008081fd5b85019350603f84018d1361489d5760008081fd5b888401356148ad61404882613fb4565b81815260059190911b85018301908a8101908f8311156148cd5760008081fd5b958401955b828710156148f2576148e38761429c565b8252958b0195908b01906148d2565b85850152506149059050608086016146c6565b908301525085525050918301918301614812565b509695505050505050565b60008060008060006080868803121561493c57600080fd5b853561494781613fd8565b9450602086013567ffffffffffffffff8082111561496457600080fd5b818801915088601f83011261497857600080fd5b81358181111561498757600080fd5b89602082850101111561499957600080fd5b6020830196508095505060408801359150808211156149b757600080fd5b6149c389838a01614310565b935060608801359150808211156149d957600080fd5b506149e6888289016147ce565b9150509295509295909350565b600060208284031215614a0557600080fd5b813567ffffffffffffffff811115614a1c57600080fd5b612f4d848285016147ce565b60008060408385031215614a3b57600080fd5b8235614a4681613fd8565b915060208301356146ff81613fd8565b60008060408385031215614a6957600080fd5b8235614a7481613e09565b9150614a826020840161429c565b90509250929050565b60008060408385031215614a9e57600080fd5b6141588361429c565b60006020808385031215614aba57600080fd5b823567ffffffffffffffff811115614ad157600080fd5b8301601f81018513614ae257600080fd5b8035614af061404882613fb4565b8181526101209182028301840191848201919088841115614b1057600080fd5b938501935b83851015614b695780858a031215614b2d5760008081fd5b614b35613f60565b614b3e8661429c565b815286860135878201526040614b568b82890161418d565b9082015283529384019391850191614b15565b50979650505050505050565b600181811c90821680614b8957607f821691505b602082108103614ba957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561082357610823614baf565b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818103614c0557614c05614baf565b6001019392505050565b600060208284031215614c2157600080fd5b8151610ea0816146b8565b8181038181111561082357610823614baf565b600060208284031215614c5157600080fd5b5051919050565b65ffffffffffff818116838216019080821115614c7757614c77614baf565b5092915050565b600062ffffff808316818103614c0557614c05614baf565b808202811582820484141761082357610823614baf565b601f821115610cd757600081815260208120601f850160051c81016020861015614cd45750805b601f850160051c820191505b81811015614cf357828155600101614ce0565b505050505050565b67ffffffffffffffff831115614d1357614d13613eb8565b614d2783614d218354614b75565b83614cad565b6000601f841160018114614d5b5760008515614d435750838201355b600019600387901b1c1916600186901b178355614db5565b600083815260209020601f19861690835b82811015614d8c5786850135825560209485019460019092019101614d6c565b5086821015614da95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60006001600160a01b03808616835260208186168185015260606040850152600091508454614dea81614b75565b8060608701526080600180841660008114614e0c5760018114614e2657614e54565b60ff198516838a01528284151560051b8a01019650614e54565b896000528560002060005b85811015614e4c5781548b8201860152908301908701614e31565b8a0184019750505b50949a9950505050505050505050565b60006000198203614e7757614e77614baf565b5060010190565b600065ffffffffffff808316818103614c0557614c05614baf565b60008251614eab818460208701613e3c565b9190910192915050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ee76080830184613e60565b9695505050505050565b600060208284031215614f0357600080fd5b8151610ea081613e0956fe4d656d6f72616e64756d286279746573342073656c6563746f722c75696e7433322065787069726529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429436572746966696361746528616464726573732066726f6d2c75696e74343820746f6b656e49642c4d656d6f72616e64756d206d656d6f72616e64756d294d656d6f72616e64756d286279746573342073656c6563746f722c75696e7433322065787069726529a264697066735822122082159a3caca3b486edcfbfdaf2803641d245d019234f11f500be04599afb89eb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5474,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 718,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 720,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 724,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 728,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 732,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 738,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3270,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint48"
      },
      {
        "astId": 3273,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "ready",
        "offset": 6,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 3275,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "URI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 3309,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_role",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes4,t_struct(Role)3304_storage)"
      },
      {
        "astId": 3378,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_channel",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Channel)3374_storage)dyn_storage"
      },
      {
        "astId": 3864,
        "contract": "contracts/Rouge.sol:Rouge",
        "label": "_nft",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint48,t_struct(NFT)3859_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Channel)3374_storage)dyn_storage": {
        "base": "t_struct(Channel)3374_storage",
        "encoding": "dynamic_array",
        "label": "struct Rouge.Channel[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_struct(Role)3304_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct Rouge.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)3304_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint48,t_struct(NFT)3859_storage)": {
        "encoding": "mapping",
        "key": "t_uint48",
        "label": "mapping(uint48 => struct Rouge.NFT)",
        "numberOfBytes": "32",
        "value": "t_struct(NFT)3859_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Channel)3374_storage": {
        "encoding": "inplace",
        "label": "struct Rouge.Channel",
        "members": [
          {
            "astId": 3365,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3367,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "totalAcquired",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3369,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "totalRedeemed",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3371,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3373,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(NFT)3859_storage": {
        "encoding": "inplace",
        "label": "struct Rouge.NFT",
        "members": [
          {
            "astId": 3852,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "channelId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3854,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "stamp",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes16"
          },
          {
            "astId": 3856,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "redeemed",
            "offset": 18,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3858,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "repudiated",
            "offset": 19,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Role)3304_storage": {
        "encoding": "inplace",
        "label": "struct Rouge.Role",
        "members": [
          {
            "astId": 3303,
            "contract": "contracts/Rouge.sol:Rouge",
            "label": "scope",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint16,t_mapping(t_address,t_bool))"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}